const {Builder, ThenableWebDriver,By, Key, until} = require('selenium-webdriver');
const ChromeOptions = require('selenium-webdriver/chrome');
const EdgeOptions = require('selenium-webdriver/edge');
const path = require('path');
const https = require('https');
const http = require('http');
const fs = require('fs');
const compressing = require('compressing');

async function Sleep(millisecond){
    return new Promise(resolve => {setTimeout(() => {resolve()}, millisecond)});
  }
  
function selectChromeDriver(localVersion){
    let mainVersion = parseInt(localVersion.split('.')[0]);
    switch(mainVersion){
        case 104:return "104.0.5112.20";
        case 103:return "103.0.5060.53";
        case 102:return "102.0.5005.61";
        case 101:return "101.0.4951.41";
        case 100:return "100.0.4896.60";
        case 99: return "99.0.4844.51";
        case 98: return "98.0.4758.80";
        case 97: return "97.0.4692.20";
        case 96: return "96.0.4664.45";
        case 95: return "95.0.4638.69";
        case 94: return "94.0.4606.61";
        case 93: return "93.0.4577.63";
        case 92: return "92.0.4515.43";
        case 91: return "91.0.4472.19";
        case 90: return "90.0.4430.24";
        case 89: return "89.0.4389.23";
        case 88: return "88.0.4324.96";
        case 87: return "87.0.4280.88";
        case 86: return "86.0.4240.22";
        case 85: return "85.0.4183.87";
        case 84: return "84.0.4147.30";
        case 83: return "83.0.4103.39";
        case 81: return "81.0.4044.69";
        case 80: return "80.0.3987.16";
        case 79: return "79.0.3945.36";
        case 78: return "78.0.3904.70";
    }
}

async function downloadDriver(browserName, version){
    return new Promise((resolve) => {
        let url, protocol;
        let driverPath = path.resolve(__dirname, "..\\..\\..\\env\\WebDriver");
        let zipPath = driverPath;
        let curVersionPath = driverPath;
        if(browserName == "chrome"){

            version = selectChromeDriver(version);
            url = "http://chromedriver.storage.googleapis.com/" + version + "/chromedriver_win32.zip"
            zipPath += "\\chromedriver.zip";
            curVersionPath += "\\chromeVersion.txt";
            protocol = http;
        }
        else{
            url = "https://msedgedriver.azureedge.net/" + version + "/edgedriver_win64.zip"
            zipPath += "\\msedgedriver.zip";
            curVersionPath += "\\msedgeVersion.txt";
            protocol = https;
        }

        //校验
        let curVersion = fs.readFileSync(curVersionPath, "utf8");
        if(curVersion == version){
            resolve(true);
            return true;
        }

        protocol.get(url, (response)=>{
            if(response.statusCode !== 200){
                console.log("download driver failed");
                resolve(false);
                return false;
            }
            response.pipe(fs.createWriteStream(zipPath)).on('finish', ()=>{
                compressing.zip.uncompress(zipPath, driverPath);

                fs.writeFileSync(curVersionPath, version)//写入版本号
                resolve(true);
                return true;
            });
        });
    });
}

class BrowserBot{
    /**初始化BrowserBot
     * @param {string} browserName 浏览器名称 "edge" "chrome"
     * @param {string} version 可选参数，浏览器版本号，第一次使用或更换版本，必须指定版本号
     * @param {string[]} startArgs 可选参数，启动参数
        无头模式：["headless"]
        设置UA:["user-agent='UA'"]
        设置代理["proxy-server=127.0.0.1:888"]
     * @param {string[]} switchArgs 可选参数，控制其他开关选项
     * @return {ThenableWebDriver} 
    */
    static async InitBrowserBot(browserName, version = null, startArgs = [], switchArgs =[]){
        let options, driver = null;
        // let downloadDir = path.resolve('.') + "\\Download";//文件默认下载目录
        // let prefs = {"download.default_directory": downloadDir};
        let prefs = {"download.default_directory": path.resolve('.') + "\\Download"};

        if(version != null){
            console.log("正在校验浏览器版本...");
            await downloadDriver(browserName, version);
            await Sleep(3000);//等待解压
        }
        if(startArgs == null) startArgs = [];
        if(switchArgs == null) switchArgs = [];

        if(browserName == "chrome"){
            options = new ChromeOptions.Options().addArguments(startArgs).excludeSwitches(switchArgs).setUserPreferences(prefs);
            driver = new Builder().forBrowser(browserName).setChromeOptions(options).build();
        }
        else if(browserName == "edge"){//MicrosoftEdge
            browserName = "MicrosoftEdge";
            options = new EdgeOptions.Options().addArguments(startArgs).excludeSwitches(switchArgs).setUserPreferences(prefs);
            driver = new Builder().forBrowser(browserName).setEdgeOptions(options).build();
        }
        return driver;
    }
}

exports.browserBot = BrowserBot;
exports.By = By;
exports.Key = Key;
exports.until = until;
const WebSocket = require('ws');

class ClientInfo{
    scoket;
    clientId;

    constructor(ws, clientId, recvDataFunction){
        this.scoket = ws;
        this.clientId = clientId;

        this.scoket.on('close', function(){
            console.log(clientId,' close');

            //从WebSocketBot.clientsinfo 移除
            for(let i = 0; i < WebSocketBot.clientsinfo.length; i++){
                if(WebSocketBot.clientsinfo[i].clientId == this.clientId)
                    WebSocketBot.clientsinfo.splice(i, 1);
            }
        });

        this.scoket.on('error', function(){
            console.log(clientId, ' error');
        });

        //注册监听客户端消息函数
        this.scoket.on('message', recvDataFunction);
    }
}

class WebSocketBot{
    static wsServer;
    static clientsinfo = [];//存放web客户端的信息
    static curClientId = 1;//1开始，用作web客户端的编号

    androidsId = [];//AndroidId数组
    androidsBot = [];//AndroidBot 数组
    
    /**构建WebSocketBot
    * @param {function(data: Buffer | ArrayBuffer | Buffer[], isBinary: boolean)} recvDataFunction 注册回调函数,用作接收客户端数据
    * data 客户端发送过来的数据
    * isBinary 是否是二进制数据
    * @param {number} port 可选参数，监听端口，默认8181
    * @return {WebSocketBot}
    */
    static build(recvDataFunction, port = 8181){
        WebSocketBot.wsServer = new WebSocket.Server({port: port});
        WebSocketBot.wsServer.on('connection', function(ws){
            let clientInfo = new ClientInfo(ws, WebSocketBot.curClientId++, recvDataFunction);
            WebSocketBot.clientsinfo.push(clientInfo);
        });

        return new WebSocketBot();
    }

    /**发送数据到客户端
    * @param {Buffer | ArrayBuffer | Buffer[]} data 要发送的数据
    * @param {number} clientId 可选参数，客户端ID。 默认发送所有的客户端，如果指定则发送指定的客户端
    * @param {boolean} isBinary 可选参数，是否是二进制数据
    */
    sendData(data, clientId = null, isBinary = false){
        for(let i = 0; i < WebSocketBot.clientsinfo.length; i++){
            if(clientId == null || clientId == WebSocketBot.clientsinfo[i].clientId)
                WebSocketBot.clientsinfo[i].scoket.send(data, {binary:isBinary});
        }
    }
}

module.exports = WebSocketBot;